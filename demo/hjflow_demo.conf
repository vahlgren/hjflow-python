name: "hjflow_demo"           # <- definitions at any level of the configration
                              #    file are reachable from your program code
flow: {                       # <- ordered 'flow' section defines the execution
    first_task: {             # <- name of the step, available in your code
        mod: "task1"          # <- python module file from where to load the code
        class: "Server",      # <- if class is defined, it will be instatiated
        func: "run_server",   # <- this is the method which will be exected
        type: "thread"        # <- use 'spwan' to run in separate process,
    }                         #    'thread' to run in thread and 'call' to
    second_task: {            #    just call the function
        mod: "task2",
        func: "client_function",  # 'second_task' doesn't instantiate an object but
        type: "call",             # instead the main process will just call this
    }                             # function. One useful way to use hjflow is to
}                                 # define your program just as list of calls

settings: {

    socket: "/tmp/hjflow_demo.sock" # <- this will be reachable from the tasks
                                    #    thourgh the ctx pointer
    first_task: {
        message: "hello",           # <- this block will be automatically visible
    }                               #    to the 'first_task' in data['settings'].
                                    #    the data dict is always passed to the
    second_task: {                  #    executed function or method as a parameter
        wait: 3
    }
}
